#!/usr/bin/env bash
set -euo pipefail

# Provision TLS-enabled Mosquitto broker on Debian/Ubuntu.

BROKER_HOST="${BROKER_HOST:-rex-broker.local}"
LISTENER_PORT="${LISTENER_PORT:-8883}"
MQTT_USERNAME="${MQTT_USERNAME:-rex}"
MQTT_PASSWORD="${MQTT_PASSWORD:-}"
DATA_ROOT="${MQTT_DATA_ROOT:-/var/lib/mosquitto}"
CONFIG_ROOT="/etc/mosquitto"
CERT_DIR="${CONFIG_ROOT}/certs"
PASSWORD_DIR="${CONFIG_ROOT}/passwd"
PASSWORD_FILE="${PASSWORD_DIR}/users"
CONF_FILE="${CONFIG_ROOT}/conf.d/rex.conf"
LOG_FILE="/var/log/mosquitto/rex.log"

require_root() {
    if [[ "${EUID}" -ne 0 ]]; then
        echo "This script must be run as root (use sudo)." >&2
        exit 1
    fi
}

ensure_password() {
    if [[ -n "${MQTT_PASSWORD}" ]]; then
        return
    fi
    if [[ -t 0 ]]; then
        read -r -s -p "Enter password for MQTT user '${MQTT_USERNAME}': " MQTT_PASSWORD
        echo ""
    fi
    if [[ -z "${MQTT_PASSWORD}" ]]; then
        echo "MQTT password is required (set MQTT_PASSWORD env or provide via prompt)." >&2
        exit 1
    fi
}

install_packages() {
    export DEBIAN_FRONTEND=noninteractive
    apt-get update
    apt-get install -y mosquitto mosquitto-clients openssl
}

prepare_directories() {
    mkdir -p "${CERT_DIR}" "${PASSWORD_DIR}" "${DATA_ROOT}" "$(dirname "${LOG_FILE}")"
    chown mosquitto:mosquitto "${DATA_ROOT}" "$(dirname "${LOG_FILE}")"
    chmod 750 "${DATA_ROOT}"
}

generate_ca() {
    local ca_key="${CERT_DIR}/ca.key"
    local ca_cert="${CERT_DIR}/ca.crt"

    if [[ -f "${ca_key}" && -f "${ca_cert}" ]]; then
        return
    fi

    openssl req -x509 -nodes -newkey rsa:4096 \
        -keyout "${ca_key}" \
        -out "${ca_cert}" \
        -days 825 \
        -subj "/C=US/ST=State/L=City/O=RexAI/OU=MQTT/CN=${BROKER_HOST}"
    chmod 600 "${ca_key}"
    chown mosquitto:mosquitto "${ca_key}" "${ca_cert}"
}

generate_server_cert() {
    local server_key="${CERT_DIR}/server.key"
    local server_csr="${CERT_DIR}/server.csr"
    local server_cert="${CERT_DIR}/server.crt"
    local ca_key="${CERT_DIR}/ca.key"
    local ca_cert="${CERT_DIR}/ca.crt"

    if [[ -f "${server_key}" && -f "${server_cert}" ]]; then
        return
    fi

    openssl req -nodes -newkey rsa:4096 \
        -keyout "${server_key}" \
        -out "${server_csr}" \
        -days 825 \
        -subj "/C=US/ST=State/L=City/O=RexAI/OU=MQTT/CN=${BROKER_HOST}"

    cat > "${CERT_DIR}/extfile.cnf" <<EOF
subjectAltName = DNS:${BROKER_HOST},IP:127.0.0.1
extendedKeyUsage = serverAuth
EOF

    openssl x509 -req -in "${server_csr}" \
        -CA "${ca_cert}" -CAkey "${ca_key}" -CAcreateserial \
        -out "${server_cert}" -days 825 -sha256 \
        -extfile "${CERT_DIR}/extfile.cnf"

    rm -f "${server_csr}" "${CERT_DIR}/extfile.cnf"
    chmod 600 "${server_key}"
    chown mosquitto:mosquitto "${server_key}" "${server_cert}"
}

write_password_file() {
    touch "${PASSWORD_FILE}"
    mosquitto_passwd -b "${PASSWORD_FILE}" "${MQTT_USERNAME}" "${MQTT_PASSWORD}"
    chown mosquitto:mosquitto "${PASSWORD_FILE}"
    chmod 640 "${PASSWORD_FILE}"
}

write_configuration() {
    local ca_cert="${CERT_DIR}/ca.crt"
    local server_cert="${CERT_DIR}/server.crt"
    local server_key="${CERT_DIR}/server.key"

    cat > "${CONF_FILE}" <<EOF
# Auto-generated by setup_mosquitto.sh for Rex AI

listener ${LISTENER_PORT}
protocol mqtt

allow_anonymous false
password_file ${PASSWORD_FILE}
require_certificate false
tls_version tlsv1.3

cafile ${ca_cert}
certfile ${server_cert}
keyfile ${server_key}

persistence true
persistence_location ${DATA_ROOT}/

log_dest file ${LOG_FILE}
EOF
}

restart_service() {
    systemctl enable mosquitto
    systemctl restart mosquitto
}

print_summary() {
    cat <<EOF
Mosquitto ready with TLS and password auth.

Broker host: ${BROKER_HOST}
Listener port: ${LISTENER_PORT}
Certificates: ${CERT_DIR}
Password file: ${PASSWORD_FILE}

Update your Rex .env with:
  REX_MQTT_BROKER=${BROKER_HOST}
  REX_MQTT_PORT=${LISTENER_PORT}
  REX_MQTT_TLS=True
  REX_MQTT_TLS_CA=${CERT_DIR}/ca.crt
  REX_MQTT_TLS_CERT=${CERT_DIR}/server.crt
  REX_MQTT_TLS_KEY=${CERT_DIR}/server.key
EOF
}

main() {
    require_root
    ensure_password
    install_packages
    prepare_directories
    generate_ca
    generate_server_cert
    write_password_file
    write_configuration
    restart_service
    print_summary
}

main "$@"
